#include <esp_now.h>
#include <WiFi.h>

// Define GPIO pins for relays
#define RELAY_1_PIN 5    // Relay 1 connected to GPIO 5
#define RELAY_2_PIN 18   // Relay 2 connected to GPIO 18

// Callback function to handle received data
void OnDataRecv(const esp_now_recv_info_t *info, const uint8_t *incomingData, int len) {
  char command = incomingData[0];  // Extract the first character as the command
  Serial.print("Received Command: ");
  Serial.println(command);

  // Check the command and control relays
  switch (command) {
    case 'A':  // Turn Relay 1 ON
      digitalWrite(RELAY_1_PIN, HIGH);
      Serial.println("Relay 1 ON");
      break;
    case 'a':  // Turn Relay 1 OFF
      digitalWrite(RELAY_1_PIN, LOW);
      Serial.println("Relay 1 OFF");
      break;
    case 'B':  // Turn Relay 2 ON
      digitalWrite(RELAY_2_PIN, HIGH);
      Serial.println("Relay 2 ON");
      break;
    case 'b':  // Turn Relay 2 OFF
      digitalWrite(RELAY_2_PIN, LOW);
      Serial.println("Relay 2 OFF");
      break;
    default:
      Serial.println("Invalid Command");
      break;
  }
}

void setup() {
  // Initialize serial monitor
  Serial.begin(115200);

  // Set relay pins as output and initialize them OFF
  pinMode(RELAY_1_PIN, OUTPUT);
  digitalWrite(RELAY_1_PIN, LOW);
  pinMode(RELAY_2_PIN, OUTPUT);
  digitalWrite(RELAY_2_PIN, LOW);

  // Set device as a Wi-Fi station
  WiFi.mode(WIFI_STA);

  // Initialize ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register the callback function to handle incoming data
  esp_now_register_recv_cb(OnDataRecv);

  Serial.println("Sender ESP32 Ready to Control Two Relays");
}

void loop() {
  // Do nothing, wait for commands
}
