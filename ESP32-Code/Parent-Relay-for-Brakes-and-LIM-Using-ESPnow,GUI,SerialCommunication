#include <WiFi.h>
#include <esp_now.h>

// Define the MAC address of the child ESP32
uint8_t childMACAddress[] = {0xA8, 0x42, 0xE3, 0xBB, 0xB6, 0x3C}; // Replace with the actual MAC address of the child ESP32

// Structure to send data
typedef struct struct_message {
  char command;  // Command to control relays
} struct_message;

struct_message relayCommand;

// Callback when data is sent via ESP-NOW
void OnDataSent(const uint8_t* mac_addr, esp_now_send_status_t status) {
  Serial.print("ESP-NOW Send Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

void setup() {
  // Initialize serial communication
  Serial.begin(115200);
  Serial.println("Parent ESP32: Initializing...");

  // Set Wi-Fi mode to Station (required for ESP-NOW)
  WiFi.mode(WIFI_STA);
  Serial.println("Wi-Fi set to Station mode for ESP-NOW");

  // Initialize ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    ESP.restart();
  }

  // Register the callback for ESP-NOW send status
  esp_now_register_send_cb(OnDataSent);

  // Register the child ESP32 as a peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, childMACAddress, 6);
  peerInfo.channel = 0;  // Default channel for ESP-NOW
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) == ESP_OK) {
    Serial.println("Peer added successfully");
  } else {
    Serial.println("Failed to add peer");
    ESP.restart();
  }

  Serial.println("Parent ESP32 Ready to Receive USB Commands");
}

void loop() {
  // Check for serial input
  if (Serial.available()) {
    char command = Serial.read();
    Serial.print("Received Command via USB: ");
    Serial.println(command);

    // Forward the command to the child ESP32 via ESP-NOW
    if (command == 'A') {
      // When Relay A is ON, turn Relay B OFF
      relayCommand.command = 'A';
      esp_err_t result = esp_now_send(childMACAddress, (uint8_t*)&relayCommand, sizeof(relayCommand));
      if (result == ESP_OK) {
        Serial.println("Command Sent via ESP-NOW: A (Relay A ON)");
      } else {
        Serial.println("Error sending command via ESP-NOW");
      }

      // Now send the command to turn Relay B OFF
      relayCommand.command = 'b';
      result = esp_now_send(childMACAddress, (uint8_t*)&relayCommand, sizeof(relayCommand));
      if (result == ESP_OK) {
        Serial.println("Command Sent via ESP-NOW: b (Relay B OFF)");
      } else {
        Serial.println("Error sending command via ESP-NOW");
      }

    } else if (command == 'a') {
      // When Relay A is OFF, turn Relay B ON
      relayCommand.command = 'a';
      esp_err_t result = esp_now_send(childMACAddress, (uint8_t*)&relayCommand, sizeof(relayCommand));
      if (result == ESP_OK) {
        Serial.println("Command Sent via ESP-NOW: a (Relay A OFF)");
      } else {
        Serial.println("Error sending command via ESP-NOW");
      }

      // Now send the command to turn Relay B ON
      relayCommand.command = 'B';
      result = esp_now_send(childMACAddress, (uint8_t*)&relayCommand, sizeof(relayCommand));
      if (result == ESP_OK) {
        Serial.println("Command Sent via ESP-NOW: B (Relay B ON)");
      } else {
        Serial.println("Error sending command via ESP-NOW");
      }

    } else if (command == 'B' || command == 'b') {
      // If invalid command (or any other command), just print error.
      Serial.println("Invalid Command");
    }
  }
}
